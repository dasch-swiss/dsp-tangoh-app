name: CI

on:
  push:
  schedule:
    -  cron: '0 7 * * *'
  release:
    types: [published]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: sbt
      - name: install requirements
        run: sudo apt-get install ca-certificates-java expect
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: make install
      - name: Run tests
        run: make test-ci

  release-please:
    name: Prepare next release
    runs-on: ubuntu-latest
    # Automate releases with Conventional Commit Messages as Pull Requests are merged into "main" branch
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: GoogleCloudPlatform/release-please-action@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: simple
          package-name: dsp-tangoh-app
          changelog-types: '[{"type": "feat","section": "Enhancements","hidden": false }, {"type": "fix","section": "Bug Fixes","hidden": false }, {"type": "chore","section": "Maintenance","hidden": false }, {"type": "docs","section": "Documentation","hidden": false }]'

  # publish only on release
  publish:
    name: Publish (on release only)
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 50
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: sbt
      - name: Install requirements
        run: sudo apt-get install ca-certificates-java expect redis-tools unzip
      - name: Build and publish all images to Dockerhub
        run: |
          echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
          make docker-publish

  # google chat notification about release
  notification:
    name: Google chat notification about release and published version
    needs: [publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Send notification to google chat room "DSP releases"
        uses: lakto/google-chat-action@main
        with:
          url: ${{ secrets.GOOGLE_CHAT_DSP_RELEASES_WEBHOOK_URL }}
